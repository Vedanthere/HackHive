{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nlet socket = null;\nexport const initializeSocket = () => {\n  socket = io('http://localhost:5000'); // Replace with your backend URL\n  return socket;\n};\nexport const getSocket = () => {\n  if (!socket) throw new Error('Socket not initialized!');\n  return socket;\n};\n\n// For Redux integration\nexport const setupSocketListeners = dispatch => {\n  socket.on('transcript-chunk', chunk => {\n    dispatch(addTranscriptChunk(chunk));\n  });\n};\n\n// WebSocket connection setup\nconst createSocketConnection = (url, onMessage, onError, onClose) => {\n  const socket = new WebSocket(url);\n\n  // Event listener for connection open\n  socket.onopen = () => {\n    console.log('WebSocket connection established.');\n  };\n\n  // Event listener for incoming messages\n  socket.onmessage = event => {\n    try {\n      const data = JSON.parse(event.data); // Parse incoming message\n      onMessage(data); // Pass data to the provided callback\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  };\n\n  // Event listener for errors\n  socket.onerror = error => {\n    console.error('WebSocket error:', error);\n    onError(error); // Pass error to the provided callback\n  };\n\n  // Event listener for connection close\n  socket.onclose = () => {\n    console.log('WebSocket connection closed.');\n    onClose(); // Notify when the connection is closed\n  };\n  return socket;\n};\n\n// Custom hook for managing WebSocket connection\nconst useWebSocket = (url, onMessage, onError, onClose) => {\n  _s();\n  const socketRef = useRef(null);\n  useEffect(() => {\n    // Create WebSocket connection\n    socketRef.current = createSocketConnection(url, onMessage, onError, onClose);\n\n    // Cleanup function to close the connection\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.close();\n      }\n    };\n  }, [url, onMessage, onError, onClose]);\n\n  // Function to send messages through the WebSocket\n  const sendMessage = message => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not open.');\n    }\n  };\n  return {\n    sendMessage\n  };\n};\n_s(useWebSocket, \"8c0rAI93JE8jpOVTnobt43KkFfY=\");\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","io","socket","initializeSocket","getSocket","Error","setupSocketListeners","dispatch","on","chunk","addTranscriptChunk","createSocketConnection","url","onMessage","onError","onClose","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","error","onerror","onclose","useWebSocket","_s","socketRef","current","close","sendMessage","message","readyState","OPEN","send","stringify"],"sources":["C:/Users/Varun G/Documents/My_Projects/HackHive/src/services/socket.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nlet socket = null;\r\n\r\nexport const initializeSocket = () => {\r\n  socket = io('http://localhost:5000'); // Replace with your backend URL\r\n  return socket;\r\n};\r\n\r\nexport const getSocket = () => {\r\n  if (!socket) throw new Error('Socket not initialized!');\r\n  return socket;\r\n};\r\n\r\n// For Redux integration\r\nexport const setupSocketListeners = (dispatch) => {\r\n  socket.on('transcript-chunk', (chunk) => {\r\n    dispatch(addTranscriptChunk(chunk));\r\n  });\r\n};\r\n\r\n// WebSocket connection setup\r\nconst createSocketConnection = (url, onMessage, onError, onClose) => {\r\n  const socket = new WebSocket(url);\r\n\r\n  // Event listener for connection open\r\n  socket.onopen = () => {\r\n    console.log('WebSocket connection established.');\r\n  };\r\n\r\n  // Event listener for incoming messages\r\n  socket.onmessage = (event) => {\r\n    try {\r\n      const data = JSON.parse(event.data); // Parse incoming message\r\n      onMessage(data); // Pass data to the provided callback\r\n    } catch (error) {\r\n      console.error('Error parsing WebSocket message:', error);\r\n    }\r\n  };\r\n\r\n  // Event listener for errors\r\n  socket.onerror = (error) => {\r\n    console.error('WebSocket error:', error);\r\n    onError(error); // Pass error to the provided callback\r\n  };\r\n\r\n  // Event listener for connection close\r\n  socket.onclose = () => {\r\n    console.log('WebSocket connection closed.');\r\n    onClose(); // Notify when the connection is closed\r\n  };\r\n\r\n  return socket;\r\n};\r\n\r\n// Custom hook for managing WebSocket connection\r\nconst useWebSocket = (url, onMessage, onError, onClose) => {\r\n  const socketRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Create WebSocket connection\r\n    socketRef.current = createSocketConnection(url, onMessage, onError, onClose);\r\n\r\n    // Cleanup function to close the connection\r\n    return () => {\r\n      if (socketRef.current) {\r\n        socketRef.current.close();\r\n      }\r\n    };\r\n  }, [url, onMessage, onError, onClose]);\r\n\r\n  // Function to send messages through the WebSocket\r\n  const sendMessage = (message) => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      socketRef.current.send(JSON.stringify(message));\r\n    } else {\r\n      console.error('WebSocket is not open.');\r\n    }\r\n  };\r\n\r\n  return { sendMessage };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}