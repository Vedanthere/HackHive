{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst transcriptSlice = createSlice({\n  name: 'transcript',\n  initialState: {\n    transcript: '',\n    // Stores the transcribed text\n    isLoading: false,\n    // Loading state for transcription process\n    error: null // Stores any errors during transcription\n  },\n  reducers: {\n    setTranscript: (state, action) => {\n      state.transcript = action.payload; // Update transcript\n      state.isLoading = false; // Reset loading state\n      state.error = null; // Clear any errors\n    },\n    setLoading: (state, action) => {\n      state.isLoading = action.payload; // Set loading state\n    },\n    setError: (state, action) => {\n      state.error = action.payload; // Set error message\n      state.isLoading = false; // Reset loading state\n    },\n    clearTranscript: state => {\n      state.transcript = ''; // Clear transcript\n      state.error = null; // Clear errors\n    }\n  }\n});\nexport const {\n  setTranscript,\n  setLoading,\n  setError,\n  clearTranscript\n} = transcriptSlice.actions;\nexport default transcriptSlice.reducer;","map":{"version":3,"names":["createSlice","transcriptSlice","name","initialState","transcript","isLoading","error","reducers","setTranscript","state","action","payload","setLoading","setError","clearTranscript","actions","reducer"],"sources":["C:/Users/Varun G/Documents/My_Projects/HackHive/src/redux/transcriptSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst transcriptSlice = createSlice({\r\n  name: 'transcript',\r\n  initialState: {\r\n    transcript: '', // Stores the transcribed text\r\n    isLoading: false, // Loading state for transcription process\r\n    error: null, // Stores any errors during transcription\r\n  },\r\n  reducers: {\r\n    setTranscript: (state, action) => {\r\n      state.transcript = action.payload; // Update transcript\r\n      state.isLoading = false; // Reset loading state\r\n      state.error = null; // Clear any errors\r\n    },\r\n    setLoading: (state, action) => {\r\n      state.isLoading = action.payload; // Set loading state\r\n    },\r\n    setError: (state, action) => {\r\n      state.error = action.payload; // Set error message\r\n      state.isLoading = false; // Reset loading state\r\n    },\r\n    clearTranscript: (state) => {\r\n      state.transcript = ''; // Clear transcript\r\n      state.error = null; // Clear errors\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setTranscript, setLoading, setError, clearTranscript } = transcriptSlice.actions;\r\nexport default transcriptSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,eAAe,GAAGD,WAAW,CAAC;EAClCE,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAE;IACZC,UAAU,EAAE,EAAE;IAAE;IAChBC,SAAS,EAAE,KAAK;IAAE;IAClBC,KAAK,EAAE,IAAI,CAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChCD,KAAK,CAACL,UAAU,GAAGM,MAAM,CAACC,OAAO,CAAC,CAAC;MACnCF,KAAK,CAACJ,SAAS,GAAG,KAAK,CAAC,CAAC;MACzBI,KAAK,CAACH,KAAK,GAAG,IAAI,CAAC,CAAC;IACtB,CAAC;IACDM,UAAU,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACJ,SAAS,GAAGK,MAAM,CAACC,OAAO,CAAC,CAAC;IACpC,CAAC;IACDE,QAAQ,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACC,OAAO,CAAC,CAAC;MAC9BF,KAAK,CAACJ,SAAS,GAAG,KAAK,CAAC,CAAC;IAC3B,CAAC;IACDS,eAAe,EAAGL,KAAK,IAAK;MAC1BA,KAAK,CAACL,UAAU,GAAG,EAAE,CAAC,CAAC;MACvBK,KAAK,CAACH,KAAK,GAAG,IAAI,CAAC,CAAC;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,aAAa;EAAEI,UAAU;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,GAAGb,eAAe,CAACc,OAAO;AAC/F,eAAed,eAAe,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}