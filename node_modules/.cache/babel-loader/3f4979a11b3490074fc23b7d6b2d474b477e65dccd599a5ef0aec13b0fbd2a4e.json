{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst qaSlice = createSlice({\n  name: 'qa',\n  initialState: {\n    questions: [],\n    // Stores the list of questions and answers\n    isLoading: false,\n    // Loading state for Q&A generation\n    error: null // Stores any errors during Q&A generation\n  },\n  reducers: {\n    setQuestions: (state, action) => {\n      state.questions = action.payload; // Update questions\n      state.isLoading = false; // Reset loading state\n      state.error = null; // Clear any errors\n    },\n    setLoading: (state, action) => {\n      state.isLoading = action.payload; // Set loading state\n    },\n    setError: (state, action) => {\n      state.error = action.payload; // Set error message\n      state.isLoading = false; // Reset loading state\n    },\n    clearQuestions: state => {\n      state.questions = []; // Clear questions\n      state.error = null; // Clear errors\n    }\n  }\n});\nexport const {\n  setQuestions,\n  setLoading,\n  setError,\n  clearQuestions\n} = qaSlice.actions;\nexport default qaSlice.reducer;","map":{"version":3,"names":["createSlice","qaSlice","name","initialState","questions","isLoading","error","reducers","setQuestions","state","action","payload","setLoading","setError","clearQuestions","actions","reducer"],"sources":["C:/Users/Varun G/Documents/My_Projects/HackHive/src/redux/qaSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst qaSlice = createSlice({\r\n  name: 'qa',\r\n  initialState: {\r\n    questions: [], // Stores the list of questions and answers\r\n    isLoading: false, // Loading state for Q&A generation\r\n    error: null, // Stores any errors during Q&A generation\r\n  },\r\n  reducers: {\r\n    setQuestions: (state, action) => {\r\n      state.questions = action.payload; // Update questions\r\n      state.isLoading = false; // Reset loading state\r\n      state.error = null; // Clear any errors\r\n    },\r\n    setLoading: (state, action) => {\r\n      state.isLoading = action.payload; // Set loading state\r\n    },\r\n    setError: (state, action) => {\r\n      state.error = action.payload; // Set error message\r\n      state.isLoading = false; // Reset loading state\r\n    },\r\n    clearQuestions: (state) => {\r\n      state.questions = []; // Clear questions\r\n      state.error = null; // Clear errors\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setQuestions, setLoading, setError, clearQuestions } = qaSlice.actions;\r\nexport default qaSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,OAAO,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAE,IAAI;EACVC,YAAY,EAAE;IACZC,SAAS,EAAE,EAAE;IAAE;IACfC,SAAS,EAAE,KAAK;IAAE;IAClBC,KAAK,EAAE,IAAI,CAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACL,SAAS,GAAGM,MAAM,CAACC,OAAO,CAAC,CAAC;MAClCF,KAAK,CAACJ,SAAS,GAAG,KAAK,CAAC,CAAC;MACzBI,KAAK,CAACH,KAAK,GAAG,IAAI,CAAC,CAAC;IACtB,CAAC;IACDM,UAAU,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC7BD,KAAK,CAACJ,SAAS,GAAGK,MAAM,CAACC,OAAO,CAAC,CAAC;IACpC,CAAC;IACDE,QAAQ,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACC,OAAO,CAAC,CAAC;MAC9BF,KAAK,CAACJ,SAAS,GAAG,KAAK,CAAC,CAAC;IAC3B,CAAC;IACDS,cAAc,EAAGL,KAAK,IAAK;MACzBA,KAAK,CAACL,SAAS,GAAG,EAAE,CAAC,CAAC;MACtBK,KAAK,CAACH,KAAK,GAAG,IAAI,CAAC,CAAC;IACtB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,YAAY;EAAEI,UAAU;EAAEC,QAAQ;EAAEC;AAAe,CAAC,GAAGb,OAAO,CAACc,OAAO;AACrF,eAAed,OAAO,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}